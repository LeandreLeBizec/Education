#chargement librairie
library(questionr)
library(ggplot2)
library(reshape2)
library(mvtnorm)
library(scatterplot3d)
#Generation matrice
#p
p <- matrix(c(0.02, 0.06, 0.02, 0.10, 0.04, 0.15, 0.20, 0.10, 0.1, 0.15, 0.14, 0.14, 0.01), nrow=3, ncol=4)
#chargement librairie
library(questionr)
library(ggplot2)
library(reshape2)
library(mvtnorm)
library(scatterplot3d)
#Generation matrice
#p
p <- matrix(c(0.02, 0.06, 0.02, 0.10, 0.04, 0.15, 0.20, 0.10, 0.01, 0.15, 0.14, 0.01), nrow=3, ncol=4)
#chargement librairie
library(questionr)
library(ggplot2)
library(reshape2)
library(mvtnorm)
library(scatterplot3d)
#Generation matrice
#p
p <- matrix(c(0.02, 0.06, 0.02, 0.10, 0.04, 0.15, 0.20, 0.10, 0.01, 0.15, 0.14, 0.01), nrow=3, ncol=4)
print(p)
#chargement librairie
library(questionr)
library(ggplot2)
library(reshape2)
library(mvtnorm)
library(scatterplot3d)
#Generation matrice
#p
p <- matrix(c(0.02, 0.06, 0.02, 0.10, 0.04, 0.15, 0.20, 0.10, 0.01, 0.15, 0.14, 0.01), nrow=3, ncol=4)
#px
apply(p,1,sum)
print(p)
#py
#px
px <- apply(p,1,sum)
print(px)
#py
#chargement librairie
library(questionr)
library(ggplot2)
library(reshape2)
library(mvtnorm)
library(scatterplot3d)
#Generation matrice
#p
p <- matrix(c(0.02, 0.04, 0.01, 0.06, 0.15, 0.15, 0.02, 0.20, 0.14, 0.10, 0.10, 0.01), nrow=3, ncol=4)
#px
px <- apply(p,1,sum)
print(px)
#py
px <- apply(p,1,sum)
print(px)
#px
px <- apply(p,1,sum)
print(px)
#py
px <- apply(p,2,sum)
print(py)
#px
px <- apply(p,1,sum)
print(px)
#py
py <- apply(p,2,sum)
print(py)
#chargement librairie
library(questionr)
library(ggplot2)
library(reshape2)
library(mvtnorm)
library(scatterplot3d)
#Generation matrice
#p
p <- matrix(c(0.02, 0.04, 0.01, 0.06, 0.15, 0.15, 0.02, 0.20, 0.14, 0.10, 0.10, 0.01), nrow=3, ncol=4)
print(p)
print(p[,2])
#p_X_Y5
#P(X|Y)=P(X^Y)/P(Y)
p_X_Y5=p[,2]/py[2]
print(p_X_Y5)
help(marginTable)
??marginTable
#chargement librairie
library(rje)
install.packages("rje")
#chargement librairie
library(rje)
library(questionr)
library(ggplot2)
library(reshape2)
library(mvtnorm)
library(scatterplot3d)
#Generation matrice
#p
p <- matrix(c(0.02, 0.04, 0.01, 0.06, 0.15, 0.15, 0.02, 0.20, 0.14, 0.10, 0.10, 0.01), nrow=3, ncol=4)
print(p)
print(p[,2])
pmx <- marginTable(p)
pmx <- marginTable(p)
print(pmx)
pmx <- marginTable(p, 1)
print(pmx)
pmx <- marginTable(p, 1)
print(pmx)
pmy <- marginTbale(p, 2)
pmx <- marginTable(p, 1)
print(pmx)
pmy <- marginTable(p, 2)
print(pmy)
pmx <- marginTable(p, 1)
print(pmx)
pmy <- marginTable(p, 2)
print(pmy)
pc_X_Y5 <- conditionTable(p)
pmx <- marginTable(p, 1)
print(pmx)
pmy <- marginTable(p, 2)
print(pmy)
pc_X_Y5 <- conditionTable(p, 2=5)
pmx <- marginTable(p, 1)
print(pmx)
pmy <- marginTable(p, 2)
print(pmy)
pc_X_Y5 <- conditionTable(p, 5)
pmx <- marginTable(p, 1)
print(pmx)
pmy <- marginTable(p, 2)
print(pmy)
pc_X_Y5 <- conditionTable(p,1,2,2)
print(pc_X_Y5)
# construction de toutes les combinaisons possibles
R = expand.grid(0:12, 0:12)
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# construction de toutes les combinaisons possibles
R = expand.grid(0:12, 0:12)
# construction de toutes les combinaisons possibles
R = expand.grid(0:12, 0:12)
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# construction de toutes les combinaisons possibles
R = expand.grid(0:12, 0:12)
print(R)
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
12+11+10+9+8+7+6+5+4+3+2+1
12*12
13*13
# construction de toutes les combinaisons possibles
R = expand.grid(0:12, 0:12)
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples)
R = expand.grid(0:12, 0:12)
print(R)
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
dmultinom(R[1],12,c(18/38,18/38,2/38))
print(R[1])
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
print(R[2])
print(R[,1])
print(R[0,1])
print(R[1,1])
print(R[1,])
dmultinom(R[1,],12,c(18/38, 18/38, 2/38))
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = dmultinom(R[1,],12,theta)
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
if(R[,3]>0){
R[,4] = dmultinom(R[1,],12,theta)
}else{
R[,4] = NULL
}
length(R)
length(R[1,])
length(R[,])
length(R[,1])
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
#for(i in 1:length(R))
R[,4] = dmultinom(R[1,],12,theta)
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
#for(i in 1:length(R))
R[,4] = dmultinom(R[1,],12,theta)
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
#for(i in 1:length(R))
R[,4] = dmultinom(R[1,],12,theta)
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
#for(i in 1:length(R))
R[,4] = dmultinom(R[2,],12,theta)
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
#for(i in 1:length(R))
R[,4] = dmultinom(R[2,],12,theta)
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
for(i in 1:length(R[,1])){
R[,4] = dmultinom(R[i,],12,theta)
}
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
for(i in 1:length(R[,1])){
R[,4] = dmultinom(R[i,],12,theta)
}
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
for(i in 1:length(R[,1])){
R[,4] = dmultinom(R[i,],12,theta)
}
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = dmultinom(R[1,],12,theta)
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = dmultinom(R[1,],12,theta)
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,theta)} else {0})
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,theta)} else {0})
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,prob = theta)} else {0})
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
# attention, si erreur du type "Error in plot.new() : figure margins too large"
# il suffit d'elargir la fenêtre de visu... si, si...
library(latex2exp)
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
s <- apply(R[,4],sum)
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
s <- apply(R[,4], 2,FUN = sum)
print(R[,4])
print(R[1,1,1,4])
print(R[1,3])
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
s <- 0
for(i in 1:169){
s <- s + R[1,i]
}
print(s)
#avec un for créer un la colone puis l'ajouter à R
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
s <- 0
for(i in 1:169){
s <- s + as.int(R[1,i])
}
print(R[1,2])
print(1 + R[1,1])
print(1 + R[1,3])
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
s <- 0
for(i in 1:168){
s <- s + R[i,3]
}
print(s)
#avec un for créer un la colone puis l'ajouter à R
# construction de toutes les combinaisons possibles
#13*13 possibilité (tout les couples (x1, x2))
R = expand.grid(0:12, 0:12)
#création de x3 = 12-x1-x2
R[, 3] = 12 - R[, 1] - R[, 2]
names(R) = c("x1", "x2", "x3")
print(R)
# attention, toutes les combinaisons proposées ne sont pas possibles (observez R!), il faudra en tenir compte dans la suite
# calcul des probabilites associees a toutes les combinaisons possibles (vérifiez !)
theta <- c(18/38, 18/38, 2/38)
R[,4] = apply(R,1,function(x) if (x[3]>=0) {dmultinom(x,12,theta)} else {0})
names(R) <- c("x1", "x2", "x3", "proba")
print(R)
s <- 0
for(i in 1:169){
s <- s + R[i,4]
}
print(s)
#avec un for créer un la colone puis l'ajouter à R
q()
setwd("~/Info_3a/TP_R/TP_S6/TP4/TP4_Donnees")
tab<-read.table("hotdogs.txt", header=TRUE)
head(tab)
table(tab$Type)
View(tab)
20+17+17+1
tab=tab[-which(tab$Type==4),]
tab
tab=tab[-which(tab$Type==4),]
tab
head(tab)
tab<-read.table("hotdogs.txt", header=TRUE)
tab=tab[-which(tab$Type==4),]
head(tab)
tab$Type
tab$Type==4
tab$Type=as.factor(tab$Type)
head(tab)
sumary(Calorie)
summary(Calorie)
summary(Calorie)
attach(tab)
summary(Calories)
summary(Sodium)
help("by")
by(tab, tab$Type, summary)
help("boxplot")
boxplot(Calories~Type)
boxplot(Sodium~Type)
boxplot(Calories~Type)
boxplot(Sodium~Type)
boxplot(Calories~Type)
boxplot(Sodium~Type)
boxplot(Calories~Type)
boxplot(Sodium~Type)
boxplot(Calories~Type)
boxplot(Calories~Type)
boxplot(Sodium~Type)
mod1=lm(Calories~Type, data=tab)
par(mfrow=c(2,2))
plot(mod1)
par(mfrow=c(1,1))
anova(mod1)
summary(mod1)
install.packages("emmeans")
anova(mod1)
summary(mod1)
library(emmeans)
emmeans(mod1, pairwise~Type, adjust="bonferroni")
emmeans(mod1, pairwise~Type, adjust="bonferroni")
anova(mod1)
summary(mod1)
156.85
156.85+1856
156.85-38.085
library(emmeans)
emmeans(mod1, pairwise~Type, adjust="bonferroni")
